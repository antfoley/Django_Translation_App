name: Deploy to EC2

on:
  push:
    branches:
      - main  # Triggers on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_INSTANCE_SG_ID: ${{ secrets.AWS_INSTANCE_SG_ID }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get runner IP address
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Whitelist runner IP address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
          echo "Whitelisted runner IP address: ${{ steps.ip.outputs.ipv4 }}"

      - name: Verify whitelisted IP address
        run: |
          aws ec2 describe-security-groups --group-ids $AWS_INSTANCE_SG_ID

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin    

      - name: Build and push Docker image
        run: |
          echo "${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}" > translation_app/booming-post-404017-49309d69296e.json
          docker build -t ${{ secrets.DOCKER_USERNAME }}/django-translation-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/django-translation-app:latest

      # SSH into the EC2 instance and install Docker (if necessary)
      - name: SSH into EC2 and Install Docker
        run: |
          echo ${{ secrets.EC2_SSH_KEY }} > key.pem && chmod 600 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          if ! [ -x "$(command -v docker)" ]; then
            sudo apt-get update -y
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          else
            echo "Docker is already installed"
          fi
          EOF

      # SSH into the EC2 instance and deploy the latest Docker container
      - name: Pull latest image and deploy container
        run: |
          echo ${{ secrets.EC2_SSH_KEY }} > key.pem && chmod 600 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/django-translation-app:latest
          sudo docker stop $(sudo docker ps -q) || true  # Stop existing containers, if any
          sudo docker rm $(sudo docker ps -a -q) || true  # Remove existing containers, if any
          sudo docker run -d -p 8000:8000 --restart unless-stopped --memory="512m" ${{ secrets.DOCKER_USERNAME }}/django-translation-app:latest
          EOF

      # Check Docker container logs
      - name: Check Docker container logs
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          sudo docker logs $(sudo docker ps -q)
          EOF

      # Revoke runner IP address from the security group after job completion
      - name: Revoke runner IP address
        if: always()
        run: |
          echo "Revoking runner IP address: ${{ steps.ip.outputs.ipv4 }}"
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
